//@version=4
study("Pump Dump Protection", shorttitle="PDP_Backtest", overlay=true)

//RSI and Volume
enter_applied_price = input(title="Enter Applied Price", type=input.source, defval=open)
exit_applied_price = input(title="Exit Applied Price", type=input.source, defval=close)
vollim = input(title="Fast PDP Volume", type=input.integer, defval=10000000)
vollimh = input(title="Slow PDP Volume", type=input.integer, defval=10000000)
pdT_lim = input(title="Price Delta Limit", type=input.float, defval=0.4)
rsi_len = input(title="RSI Length", type=input.integer, defval=10)
rsi_lf = input(title="RSI Fast Low", type=input.integer, defval=30)
rsi_hf = input(title="RSI Fast High", type=input.integer, defval=70)

rsi_lc = input(title="RSI Slow Low", type=input.integer, defval=40)
rsi_hc = input(title="RSI Slow High", type=input.integer, defval=60)

adx_len = input(title="ADX Length", type=input.integer, defval=14)
adx_fo = input(title="ADX Fast Open", type=input.integer, defval=50)
adx_fc = input(title="ADX Fast Close", type=input.integer, defval=40)
adx_so = input(title="ADX Slow Open", type=input.integer, defval=50)
adx_sc = input(title="ADX SLow Close", type=input.integer, defval=40)
DI_lim = input(title="DIs High Limit", type=input.integer, defval=50)
DI_spr = input(title="DIs Spread Limit", type=input.integer, defval=15)


calc_rsi = rsi(enter_applied_price,rsi_len)
float vol = volume
bool strong_rsi_enter = false
strong_rsi_enter := calc_rsi > rsi_hf or calc_rsi < rsi_lf ? true : false
float TrueRange = max(max(high-low, abs(high-nz(close[1]))), abs(low-nz(close[1])))
float DirectionalMovementPlus = high-nz(high[1]) > nz(low[1])-low ? max(high-nz(high[1]), 0): 0
float DirectionalMovementMinus = nz(low[1])-low > high-nz(high[1]) ? max(nz(low[1])-low, 0): 0
float SmoothedTrueRange = 0.0
float SmoothedDirectionalMovementPlus = 0.0
float SmoothedDirectionalMovementMinus = 0.0
SmoothedTrueRange := nz(SmoothedTrueRange[1]) - (nz(SmoothedTrueRange[1])/adx_len) + TrueRange
SmoothedDirectionalMovementPlus := nz(SmoothedDirectionalMovementPlus[1]) - (nz(SmoothedDirectionalMovementPlus[1])/adx_len) + DirectionalMovementPlus
SmoothedDirectionalMovementMinus := nz(SmoothedDirectionalMovementMinus[1]) - (nz(SmoothedDirectionalMovementMinus[1])/adx_len) + DirectionalMovementMinus

float DIPlus = (SmoothedDirectionalMovementPlus/SmoothedTrueRange)*100
float DIMinus = (SmoothedDirectionalMovementMinus/SmoothedTrueRange)*100
float DX = abs((DIPlus-DIMinus)/(DIPlus+DIMinus))*100
float ADX = sma(DX, adx_len)
float pdT = abs(((close[1]-close[0])/close[0])*100)
plot(calc_rsi,title="RSI",color=color.red)
plot(ADX,title="ADX",color=color.blue)
plot(DIPlus,title="DI+",color=color.blue)
plot(DIMinus,title="DI-",color=color.blue)
plot(pdT,title="pDT",color=color.blue)
//plot(vol,title="Volume",color=color.blue)
LONG = DIPlus > DIMinus
SHORT = DIMinus > DIPlus
RSI_OUT_FAST = calc_rsi > rsi_hf or calc_rsi < rsi_lf
RSI_OUT_SLOW = calc_rsi > rsi_hc or calc_rsi < rsi_lc
RSI_IN_FAST = calc_rsi > rsi_lf and calc_rsi < rsi_hf
RSI_IN_SLOW = calc_rsi > rsi_lc and calc_rsi < rsi_hc

FAST_LONG = LONG and vol > vollim and pdT > pdT_lim and ADX > adx_fo and RSI_OUT_FAST
FAST_SHORT = SHORT and vol > vollim and pdT > pdT_lim and ADX > adx_fo and RSI_OUT_FAST
FAST_CLOSE= RSI_IN_FAST or abs(DIPlus-DIMinus) < DI_spr or ADX < adx_fc
//vol < vollim


SLOW_LONG= LONG and vol > vollimh and DIPlus > DI_lim and ADX > adx_so and RSI_OUT_SLOW and DIPlus[1] > DI_lim and calc_rsi[1] > rsi_hc
//and DIPlus[2] > DI_lim  and calc_rsi[2] > rsi_hc
SLOW_SHORT= SHORT and vol > vollimh and RSI_OUT_SLOW and DIMinus > DI_lim and ADX > adx_so and DIMinus[1] > DI_lim and calc_rsi[1] < rsi_lc
//and DIMinus[2] > DI_lim  and calc_rsi[2] < rsi_lc
SLOW_CLOSE= RSI_IN_SLOW or abs(DIPlus-DIMinus) < DI_spr or ADX < adx_sc


plotshape(FAST_LONG!=FAST_LONG[1], title="FAST LONG", text="FAST LONG", location=location.abovebar, style=shape.labelup, size=size.tiny, color=color.green, textcolor=color.white, transp=0)
plotshape(FAST_SHORT!=FAST_LONG[1], title="FAST SHORT", text="FAST SHORT", location=location.abovebar, style=shape.labeldown, size=size.tiny, color=color.red, textcolor=color.white, transp=0)
plotshape(FAST_CLOSE!=FAST_CLOSE[1], style=shape.arrowup, color=color.blue, size=size.normal, location=location.belowbar)
//plotshape(FAST_CLOSE_SHORT!=FAST_CLOSE_SHORT[1],title="CLOSE SHORT", text="CLOSE", location=location.abovebar, style=shape.labeldown, size=size.tiny, color=color.blue, textcolor=color.white, transp=0)
plotshape(SLOW_LONG!=SLOW_LONG[1], title="SLOW LONG", text="SLOW LONG", location=location.abovebar, style=shape.labelup, size=size.tiny, color=color.green, textcolor=color.white, transp=0)
plotshape(SLOW_SHORT!=SLOW_SHORT[1], title="SLOW SHORT",text="SLOW SHORT", location=location.abovebar, style=shape.labeldown, size=size.tiny, color=color.red, textcolor=color.white, transp=0)
plotshape(SLOW_CLOSE!= SLOW_CLOSE[1], style=shape.arrowup, color=color.yellow, size=size.normal, location=location.belowbar)
//plotshape(SLOW_CLOSE_SHORT!=SLOW_CLOSE_SHORT[1], title="CLOSE SHORT", text="CLOSE", location=location.abovebar, style=shape.labeldown, size=size.tiny, color=color.blue, textcolor=color.white, transp=0)

alertcondition(FAST_LONG, title="FAST LONG", message="XBT")
alertcondition(FAST_CLOSE, title="FAST CLOSE", message="XBT")
alertcondition(FAST_SHORT, title="FAST SHORT", message="XBT")
//alertcondition(FAST_CLOSE_SHORT, title="FAST CLOSE SHORT", message="XBT")
alertcondition(SLOW_LONG, title="SLOW LONG", message="XBT")
alertcondition(SLOW_CLOSE, title="SLOW CLOSE", message="XBT")
alertcondition(SLOW_SHORT, title="SLOW SHORT", message="XBT")
//alertcondition(SLOW_CLOSE_SHORT, title="SLOW CLOSE SHORT", message="XBT")